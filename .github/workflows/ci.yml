name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Lint and type check
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        app: [api, mobile, web-admin, shared]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Run unit tests for ${{ matrix.app }}
        run: npm run test:${{ matrix.app }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/${{ matrix.app }}/lcov.info
          flags: ${{ matrix.app }}
          name: ${{ matrix.app }}-coverage

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ntsamaela_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Setup test database
        run: |
          cd packages/database
          npm run setup:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test

      - name: Run API integration tests
        run: npm run test:integration:api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test
          JWT_SECRET: test-secret
          NODE_ENV: test

      - name: Run database integration tests
        run: npm run test:integration:database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test

  # API tests with database
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ntsamaela_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Setup database
        run: |
          cd packages/database
          npm run migrate:test
          npm run seed:test
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test

      - name: Start API server
        run: |
          cd apps/api
          npm run dev &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test
          JWT_SECRET: test-secret
          NODE_ENV: test
          PORT: 3001

      - name: Run API tests
        run: npm run test:api
        env:
          API_URL: http://localhost:3001/api
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test

  # Mobile E2E tests (iOS)
  mobile-e2e-ios:
    name: Mobile E2E Tests (iOS)
    runs-on: macos-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[e2e]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Install iOS dependencies
        run: |
          cd apps/mobile
          npx pod-install

      - name: Build iOS app
        run: |
          cd apps/mobile
          npx detox build --configuration ios.sim.debug

      - name: Run iOS E2E tests
        run: |
          cd apps/mobile
          npx detox test --configuration ios.sim.debug --headless

  # Mobile E2E tests (Android)
  mobile-e2e-android:
    name: Mobile E2E Tests (Android)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[e2e]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Start Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: echo no | avdmanager create avd -n test_device_30 -k "system-images;android-30;google_apis;x86_64"

      - name: Build Android app
        run: |
          cd apps/mobile
          npx detox build --configuration android.emu.debug

      - name: Run Android E2E tests
        run: |
          cd apps/mobile
          npx detox test --configuration android.emu.debug --headless

  # Web Admin E2E tests
  web-admin-e2e:
    name: Web Admin E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ntsamaela_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Setup database
        run: |
          cd packages/database
          npm run migrate:test
          npm run seed:test
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test

      - name: Start API server
        run: |
          cd apps/api
          npm run dev &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test
          JWT_SECRET: test-secret
          NODE_ENV: test
          PORT: 3001

      - name: Start Web Admin server
        run: |
          cd apps/web-admin
          npm run dev &
          sleep 10
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001/api

      - name: Run Web Admin E2E tests
        run: npm run test:e2e:web-admin
        env:
          WEB_ADMIN_URL: http://localhost:3000
          API_URL: http://localhost:3001/api

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Run security audit
        run: npm run security:audit
        continue-on-error: true

      - name: Run dependency vulnerability scan
        run: npm run security:scan || echo "Vulnerability scan skipped"
        continue-on-error: true

      - name: Run OWASP ZAP security tests
        run: npm run security:zap || echo "ZAP tests skipped"
        continue-on-error: true

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ntsamaela_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Setup database
        run: |
          cd packages/database
          npm run migrate:test
          npm run seed:test
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test

      - name: Start API server
        run: |
          cd apps/api
          npm run dev &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ntsamaela_test
          JWT_SECRET: test-secret
          NODE_ENV: test
          PORT: 3001

      - name: Run performance tests
        run: npm run test:performance
        env:
          API_URL: http://localhost:3001/api

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  # Build and package
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Build API
        run: npm run build:api

      - name: Build Web Admin
        run: npm run build:web-admin

      - name: Build Mobile (Android)
        run: npm run build:mobile:android

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/api/dist/
            apps/web-admin/.next/
            apps/mobile/android/app/build/outputs/

  # Deploy to staging (on main branch) - DISABLED FOR DEVELOPMENT
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build-artifacts
  #
  #     - name: Deploy to staging environment
  #       run: npm run deploy:staging
  #       env:
  #         STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
  #         STAGING_JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
  #         STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
  #
  # # Deploy to production (on main branch with manual approval) - DISABLED FOR DEVELOPMENT
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [deploy-staging]
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build-artifacts
  #
  #     - name: Deploy to production environment
  #       run: npm run deploy:production
  #       env:
  #         PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
  #         PRODUCTION_JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
  #         PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
